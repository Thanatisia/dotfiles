#!/bin/env bash
<<EOF
# Simple Dotfile install script

## DESCRIPTION
- Modifiable and Configurable/Customizable way to streamline the installation of my dotfile (and my other dotfiles too)
- Reusable in other dotfiles utilising other Linux Distributions as base

## SETUP

### PRE-REQUISITES

### DEPENDENCIES

### PRE-SETUP

## DOCUMENTATION

### SYNOPSIS
./dotinstall [{options} [arguments]...]

### PARAMETERS
-h | --help         Display this usage help
-v | --version      Display current system version information

### USAGE

## TODO
- Rewrite in Rust
EOF

### Global Variables ###
BASE_DISTRIBUTION="${1:-ArchLinux}" # Your Base Distribution
OFFICIAL_REPO_PKGLIST="pkglist.txt" # List of packages to install via your official package manager (pacman, apt etc)
declare -A REPO_PKGLISTS=(
    # list of package list names
    [official]="pkglist.txt"
    [git]="pkglist.git.txt"
    [aur]="pkglist.aur.txt"
)
declare -A PKG_INSTALL_CMDS=(
    # Dictionary of Package Manager install Commands
    [ArchLinux]="pacman -S"
    [Debian]="apt install"
)

### Helper Functions ###
read_and_store()
{
    : "
    Read in all lines of the file and store into an array
    - Using Named References to return a list via Pass-By Reference
    "
    file_name="$1"
    declare -n ref_arr="$2"
    ref_arr=(`cat $file_name`)
}
read_assoc_file()
{
    : "
    Read files with key-value dictionary and store as Associative Arra
    - Using Named References to return a key list and a value list via Pass-By Reference
    "
    IN_FILE_NAME="$1"
    declare -n ref_assoc_Key="$2"
    declare -n ref_assoc_Value="$3"

    readarray -t lines < "$IN_FILE_NAME"
    for line in "${lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        # assoc[$key]=$value 
        ref_assoc_Key+=("$key")
        ref_assoc_Value+=("$value")
    done
}

### Core Functions ###
install_pkgs()
{
    : "
    Install packages according to Base Distribution
    "
    # - Official Repository
    # Check if package list is found
    if [[ -f $OFFICIAL_REPO_PKGLIST ]]; then
        echo -e "[S] Installing official repositories"
        echo -e "${PKG_INSTALL_CMDS[$BASE_DISTRIBUTION]} - < $OFFICIAL_REPO_PKGLIST"
        echo -e "[D] Official repositories installation finish."
        echo -e ""
    fi

    # - Git
    # Check if git package list is found
    git_pkglist="${REPO_PKGLISTS["git"]}"
    if [[ -f $git_pkglist ]]; then
        echo -e "[S] Installing git repositories"
        # read_and_store "${REPO_PKGLISTS["git"]}" pkgs
        read_assoc_file "${REPO_PKGLISTS["git"]}" pkg_names pkg_urls
        for i in "${!pkg_names[@]}"; do
            pkg_name="${pkg_names[$i]}"
            pkg_url="${pkg_urls[$i]}"
            echo -e "[+] Cloning package : $pkg_name..."
            echo -e "git clone $pkg_url"
            echo -e "cd $pkg_name"
            echo -e "make && sudo make install"
        done
        echo -e "[D] Git repositories installation finish."
        echo -e ""
    fi

    # - Additional Community Repositories (Distribution-exclusive i.e.)
    case "$BASE_DISTRIBUTION" in 
        "ArchLinux")
            # - AUR

            # Check if AUR package list is found
            aur_pkglist="${REPO_PKGLISTS["aur"]}"
            if [[ -f $aur_pkglist ]]; then
                # Found - install
                echo -e "[S] Installing AUR repositories"
                # read_and_store "${REPO_PKGLISTS["aur"]}" pkgs
                read_assoc_file "${REPO_PKGLISTS["aur"]}" pkg_names pkg_urls
                for i in "${!pkg_names[@]}"; do
                    pkg_name="${pkg_names[$i]}"
                    pkg_url="${pkg_urls[$i]}"
                    echo -e "[+] Cloning package : $pkg_name..."
                    echo -e "git clone $pkg_url"
                    echo -e "cd $pkg_name"
                    echo -e "makepkg -si"
                done
                echo -e "[D] AUR repositories installation finish."
            fi
            ;;
    esac
}

main()
{
    ### Main Function ###

    printf "%s\n" "==================="
    printf "%s\n" "Installing Packages"
    printf "%s\n" "==================="
    install_pkgs
    echo -e ""
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
